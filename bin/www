#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nana-movies-server:server');
var http = require('http');
// var https = require('https');
// var net = require('net')
// var fs = require("fs")


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
// var port = '49008'
app.set('port', port);
app.set('head', { 'Content-Type': 'application/json;charset=utf-8' })
// app.set("result", { status: '', data: {}, tottal: '' })
// var ports = '3000'
// app.set('post',ports)
// app.set('host','http://localhost:3000')

// const options = {
//   key: fs.readFileSync("../soft/https/xxx.key", "utf8"),
//   cert: fs.readFileSync("../soft/https/xxx.pem", "utf8")
// }

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// var servers = https.createServer(options, app)
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// servers.listen(ports)
// servers.on('error', onError);
// servers.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


// https
// 创建服务器
// net.createServer(function(socket){
//   socket.once('data', function(buf){
//    // buf 返回格式数组，如果https访问，buf[0]为十六进制 
//    // https数据流的第一位是十六进制 “16” ，转换成十进制就是22
//    var address = buf[0] === 22 ? httpsPort : httpPort;
//    //创建指向https或http服务器的链接
//    var proxy = net.createConnection(address, function() {
//             proxy.write(buf);
//             //反向代理的过程，tcp接受的数据交给代理链接，代理链接服务器端返回数据交由socket返回给客户端
//             socket.pipe(proxy).pipe(socket);
//    });
//    proxy.on('error', function(err) {
//             console.log(err);
//    });
//   });
//   socket.on('error', function(err) {
//            console.log(err);
//   });
//  },app).listen(3000); 
// node创建的真实端口，此处设置为3000，3000端口需要在阿里云服务器的安全组中开启才能使用，默认是80端口。
// 浏览器访问： http://xxx.com:3000  https://xxx.xom:3000 ，两种方式都可访问